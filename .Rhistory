mean(df_miss$Ozone)
MeanImputation = function(vec){
vec[is.na(vec)] = mean( vec[!is.na(vec)] )
return(vec)
}
df_mean = apply(df_miss,2,func = MeanImputation)
df_mean = apply(df_miss, 2, FUN = MeanImputation)
plot(df_miss)
plot(df_mean)
df_mean = data.frame(apply(df_miss, 2, FUN = MeanImputation))
View(df_miss)
View(df_mean)
View(df_miss)
View(df_mean)
for col in colnames(df_miss){
df_miss$col = MeanImputation(df_miss$col)
}
for(col in colnames(df_miss)){
df_miss$col = MeanImputation(df_miss$col)
}
colnames(df_miss)
for(col in colnames(df_miss)){
df_miss[col] = MeanImputation(df_miss[col])
}
View(df_miss)
View(df_mean)
df_miss==df_mean
"""
```{r}
iris <- iris
df_missing <- iris$Sepal.Length
df_missing[c(2,4,6,8,10)] <- NA
df_missing <- meanimpute(df_missing)
df_missing[c(2,4,6,8,10)]
```
# locf and nocb
```{r}
library(nonmemica)
locf(c(NA,1,2,NA,NA,3,NA,4,NA))
nocb(c(NA,1,2,NA,NA,3,NA,4,NA))
forbak(c(NA,1,2,NA,NA,3,NA,4,NA))
airquality <- data.frame(datasets::airquality)
```
```{r}
removedata <- sample(1:nrow(airquality))[1:10]
airquality_missing  <- airquality
airquality_missing$Temp[removedata] <- NA
airquality_missing$Temp <- forbak(airquality_missing$Temp)
original <- airquality$Temp[removedata]
imputed <- airquality_missing$Temp[removedata]
original <- as.numeric(original)
imputed  <- as.numeric(imputed)
plot(original,imputed)
abline(a = 1, b = 1)
plot(airquality$Temp)
plot(airquality_missing$Temp)
```
# KNN and KNN imputation
```{r}
# how KNN works
# KNN is a clustering algorithm, allowing the prediction of species from Sepal and petal details
df <- iris
#the normalization function is created
nor <-function(x) { (x -min(x))/(max(x)-min(x))   }
##Run nomalization on first 4 coulumns of dataset because they are the predictors
df_norm <- as.data.frame(lapply(df[,c(1,2,3,4)], nor))
```
```{r}
ran <- sample(1:nrow(df), 0.9 * nrow(df))
df_train <- df_norm[ran,]
df_test <- df_norm[-ran,]
df_target_category <- iris[ran,5]
df_test_category <- iris[-ran,5]
library(class)
##run knn function
predicted <- knn(df_train,df_test,cl=df_target_category,k=3)
##create confusion matrix
tab <- table(predicted,df_test_category)
tab
```
```{r}
##this function divides the correct predictions by total number of predictions that tell us how accurate teh model is.
accuracy <- function(x){sum(diag(x)/(sum(rowSums(x)))) * 100}
accuracy(tab)
```
# KNN Imputation
```{r}
# the concept is the same, but we are clustering the other columns and filing the missing data based on the nearest neighbor in the clustering
library(DMwR2)
ran2 <- sample(1:nrow(df), 0.1 * nrow(df))
df_missing <- df[,-5]
df_missing$Sepal.Length[ran2] <- ""
#KNN imputation
df_imputed <- knnImputation(df_missing,k=3)
tab <- c()
tab$original <- df$Sepal.Length[ran2]
tab$imputed <- as.numeric(df_imputed$Sepal.Length[ran2])
tab$diff <- tab$original - tab$imputed
plot(df$Sepal.Length)
plot(df_imputed$Sepal.Length)
percetange_dff <- tab$diff / tab$original * 100
barplot(percetange_dff)
```
## Trying different paramteres
```{r}
for(i in 1:10) {
df_imputed <- knnImputation(df_missing, k = i, scale = T)
tab <- c()
tab$original <- df$Sepal.Length[ran2]
tab$imputed <- as.numeric(df_imputed$Sepal.Length[ran2])
tab$diff <- tab$original - tab$imputed
percetange_dff <- tab$diff / tab$original * 100
print(barplot(percetange_dff))
}
```
# Advance Data Imputation with MICE
```{r}
library(mice)
data <- airquality
data[1:7,3] <- NA
data[1:5,4] <- NA
head(data)
tempData <- mice(data,m=3, maxit=50, meth='pmm', seed=500, printFlag = FALSE)
summary(tempData)
imputedData <- complete(tempData,1)
```
```{r}
diff_pmm <- cbind(airquality[1:7,3],imputedData[1:7,3])
diff_pmm
```
```{r}
diff2_pmm <- cbind(airquality[1:5,4], imputedData[1:5,4])
diff2_pmm
```
# Random forest imputation
```{r}
data <- airquality
data[1:7,3] <- NA
data[1:5,4] <- NA
tempData <- mice(data,m=3, maxit=50, meth='rf', seed=500, printFlag = FALSE)
imputedData <- complete(tempData,1)
```
```{r}
diff_rf <- cbind(airquality[1:7,3],imputedData[1:7,3])
diff2_rf <- cbind(airquality[1:5,4], imputedData[1:5,4])
```
```{r}
original <- c(airquality[1:7,3],airquality[1:5,4])
pmm <- c(diff_pmm[,2],diff2_pmm[,2])
rf <- c(diff_rf[,2],diff2_rf[,2])
pdata <- c()
pdata$ori <- original
pdata$pmm <- pmm
pdata$rf <- rf
pdata$index <- seq(1, length(original))
pdata  <- as.data.frame(pdata)
library(ggplot2)
ggplot(pdata, aes(x=index))  +
geom_line(aes(y=ori), col="blue" ) +
geom_line(aes(y=pmm), col="red"  ) +
geom_line(aes(y=rf),  col="green") +
theme_bw()
```
# Imputation of patient data in TCGA
```{r}
library(TCGAbiolinks)
#Load in the data
query_TCGA <- GDCquery(
project = "TCGA-PRAD",
data.category = "Transcriptome Profiling",
data.type = "Gene Expression Quantification",
experimental.strategy = "RNA-Seq",
barcode = c("TCGA-CH-*")) # parameter enforced by GDCquery
# https://portal.gdc.cancer.gov/projects/TCGA-PRAD
GDCdownload(query = query_TCGA, method = "api", files.per.chunk = 100)
tcga_data <- GDCprepare(query_TCGA,summarizedExperiment = TRUE)
class(tcga_data)
saveRDS(tcga_data,file = "TCGA.rds")
tcga_data <- readRDS("TCGA.rds")
```
```{r}
library(mice)
rawdata <- as.data.frame(tcga_data@assays@data$tpm_unstrand)
#rawdata <- rawdata[,-c(1,2)]
rawdata <- log10(rawdata+1)
rawdata <- rawdata[!rowSums(rawdata)<10,]
rawdata <- rawdata[1:1000,]
ran2 <- sample(1:nrow(rawdata), 0.20 * nrow(rawdata))
missing_data <- rawdata
missing_data[ran2,1] <- NA
```
```{r}
tempData <- mice(missing_data,m=3, maxit=50, meth='rf', seed=500, printFlag = FALSE)
#RandomForest
imputed_data_1 <- complete(tempData,1)
```
```{r}
library(mice)
tempData <- mice(missing_data, m=3, maxit=50, meth='lasso.select.norm', seed=500, printFlag = FALSE)
#Lasso select + linear regression
imputed_data_2 <- complete(tempData,1)
```
```{r}
original <- rawdata[, 1]
imputed1 <- imputed_data_1[, 1]
imputed2 <- imputed_data_2[, 1]
pdata <- c()
pdata$ori <- original
pdata$imp1 <- imputed1
pdata$imp2 <- imputed2
pdata$index <- seq(1, length(original))
pdata  <- as.data.frame(pdata)
pdata <- pdata[ran2, ]
library(ggplot2)
ggplot(pdata, aes(x = index))  +
geom_line(aes(y = ori), col = "blue") +
geom_line(aes(y = imp1), col = "red") +
geom_line(aes(y = imp2),  col = "green") +
theme_bw() +
scale_y_log10()
```
# Residual plot
```{r}
pdata$resi_imp1 <- (pdata$ori - pdata$imp1)/pdata$ori
pdata$resi_imp2 <- (pdata$ori - pdata$imp2)/pdata$ori
ggplot(pdata, aes(x=ori))  +
geom_line(aes(y=resi_imp1), col="red"  ) +
geom_line(aes(y=resi_imp2),  col="green") +
theme_bw() +
scale_x_log10() +
ylab("Residual") +
xlab("Count No")
```
df_miss = airquality
for(col in colnames(df_miss)){
df_miss[col] = MeanImputation(df_miss[col])
}
#save in new dataframe
df_median = data.frame(
apply(df_miss, 2, FUN = MeanImputation)
)
View(df_median)
View(df_miss)
View(data)
df_miss = airquality
for(col in colnames(df_miss)){
df_miss[col] = MedianImputation(df_miss[col])
}
#save in new dataframe
df_median = data.frame(
apply(df_miss, 2, FUN = MedianImputation)
)
View(df_median)
View(df_miss)
ModeImputation = function(vec){
vec[is.na(vec)] = mean( vec[!is.na(vec)] )
return(vec)
}
#save inplace
for(col in colnames(df_miss)){
df_miss[col] = MedianImputation(df_miss[col])
}
#save in new dataframe
df_median = data.frame(
apply(df_miss, 2, FUN = MedianImputation)
)
vec[is.na(vec)] = median( vec[!is.na(vec)] )
MedainImputation = function(vec){
vec[is.na(vec)] = median( vec[!is.na(vec)] )
return(vec)
}
for(col in colnames(df_miss)){
df_miss[col] = MedianImputation(df_miss[col])
}
#save in new dataframe
df_median = data.frame(
apply(df_miss, 2, FUN = MedianImputation)
)
MedainImputation = function(vec){
vec[is.na(vec)] = median( vec[!is.na(vec)] )
return(vec)
}
MedianImputation = function(vec){
vec[is.na(vec)] = median( vec[!is.na(vec)] )
return(vec)
}
#save inplace
for(col in colnames(df_miss)){
df_miss[col] = MedianImputation(df_miss[col])
}
#save in new dataframe
df_median = data.frame(
apply(df_miss, 2, FUN = MedianImputation)
)
View(df_median)
View(df_miss)
x = c(1,2,1,2,3,5,6,9,1,2,1,1,1)
which.max(tabulate(x)
)
tabulate(x)
ModeImputation = function(vec){
values = unique(vec)
pos = which.max(tabulate(vec))
return(values[pos])
}
# DATASET
df_miss = airquality
#save inplace
for(col in colnames(df_miss)){
df_miss[col] = ModeImputation(df_miss[col])
}
#save in new dataframe
df_median = data.frame(
apply(df_miss, 2, FUN = ModeImputation)
)
ModeImputation = function(vec){
not_na = vec[!is.na(vec)]
values = unique(not_na)
pos = which.max(tabulate(not_na))
vec[is.na(vec)] = values[pos]
return(vec)
}
#save inplace
for(col in colnames(df_miss)){
df_miss[col] = ModeImputation(df_miss[col])
}
#save in new dataframe
df_median = data.frame(
apply(df_miss, 2, FUN = ModeImputation)
)
df_mode = data.frame(
apply(df_miss, 2, FUN = ModeImputation)
)
View(df_mode)
View(df_miss)
tabulate(airquality$Ozone)
unique(airquality$Ozone)
cbind(airquality$Ozone,tabulate(airquality$Ozone))
cbind(airquality$Ozone[!is.na(airquality$Ozone)],tabulate(airquality$Ozone[!is.na(airquality$Ozone)]))
cbind(unique(airquality$Ozone),tabulate(airquality$Ozone))
tabulate(airquality$Ozone)
table(airquality$Ozone)
type(table(airquality$Ozone))
data.frame(table(airquality$Ozone))
ModeImputation = function(vec){
freq_table = data.frame(table(vec[!is.na(vec)]))
pos = which.max(freq_table$freq)
vec[is.na(vec)] = freq_table$Var1[pos]
return(vec)
}
# DATASET
df_miss = airquality
#save inplace
for(col in colnames(df_miss)){
df_miss[col] = ModeImputation(df_miss[col])
}
#save in new dataframe
df_mode = data.frame(
apply(df_miss, 2, FUN = ModeImputation)
)
vec = airquality$Ozone
freq_table = data.frame(table(vec[!is.na(vec)]))
freq_table
pos = which.max(freq_table$freq)
pos
pos = which.max(freq_table$Freq)
pos
freq_table$Var1[18]
pos = which.max(freq_table$Freq)
ModeImputation = function(vec){
freq_table = data.frame(table(vec[!is.na(vec)]))
pos = which.max(freq_table$Freq)
vec[is.na(vec)] = freq_table$Var1[pos]
return(vec)
}
# DATASET
df_miss = airquality
#save inplace
for(col in colnames(df_miss)){
df_miss[col] = ModeImputation(df_miss[col])
}
#save in new dataframe
df_mode = data.frame(
apply(df_miss, 2, FUN = ModeImputation)
)
View(df_miss)
View(df_mode)
View(data)
data.frame(table(airquality$Ozone))
vec = airquality$Ozone)
vec = airquality$Ozone
freq_table = data.frame(table(vec[!is.na(vec)]))
freq_table
pos = which.max(freq_table$Freq)
pos
freq_table$Var1[pos]
print(freq_table$Var1[pos])
freq_table$Var1[pos][1+]
freq_table$Var1[pos][1]
vec
vec[is.na(vec)] = freq_table$Var1[pos]
vec
mean(vec,na.rm = T)
vec = airquality$Ozone
freq_table = data.frame(table(vec[!is.na(vec)]))
freq_table
pos = which.max(freq_table$Freq)
pos
View(freq_table)
vec[is.na(vec)] = int(freq_table$Var1[pos])
vec[is.na(vec)] = as.numeric(freq_table$Var1[pos])
vec
as.numeric(freq_table$Var1[pos])
freq_table$Var1[pos]
vec[is.na(vec)] = as.numeric(freq_table[pos])
vec[is.na(vec)] = as.numeric(freq_table[pos][1])
vec[is.na(vec)] = as.numeric(freq_table[pos,1])
vec
as.numeric(freq_table$Var1[pos,1])
as.numeric(freq_table[pos,1])
vec = airquality$Ozone
freq_table = data.frame(table(vec[!is.na(vec)]))
freq_table
pos = which.max(freq_table$Freq)
pos
as.numeric(freq_table[pos,"Var1"])
freq_table = matrix(table(vec[!is.na(vec)]))
freq_table
pos = which.max(freq_table)
pos
ModeImputation = function(vec){
not_na = vec[!is.na(vec)]
freq_table = matrix(table(not_na))
pos = which.max(freq_table)
vec[is.na(vec)] = unique(not_na)[pos]
return(vec)
}
# DATASET
df_miss = airquality
for(col in colnames(df_miss)){
df_miss[col] = ModeImputation(df_miss[col])
}
#save in new dataframe
df_mode = data.frame(
apply(df_miss, 2, FUN = ModeImputation)
)
View(df_mode)
View(df_miss)
vec = airquality$Ozone
not_na = vec[!is.na(vec)]
freq_table = matrix(table(not_na))
freq_table
freq_table = matrix(table(not_na),ncol = 2)
table(not_na)
freq_table = matrix(table(not_na)[1:5])
pos = which.max(freq_table)
freq_table = matrix(table(not_na)[1:5])
freq_table
freq_table = as.data.frame(table(not_na)[1:5])
freq_table
vec = airquality$Ozone
not_na = vec[!is.na(vec)]
freq_table = as.data.frame(table(not_na))
freq_table
freq_table$not_na[pos]
pos = which.max(freq_table$Freq)
pos
freq_table$not_na[pos]
ModeImputation = function(vec){
not_na = vec[!is.na(vec)]
freq_table = as.data.frame(table(not_na))
pos = which.max(freq_table$Freq)
vec[is.na(vec)] = freq_table$not_na[pos]
return(vec)
}
# DATASET
df_miss = airquality
#save inplace
for(col in colnames(df_miss)){
df_miss[col] = ModeImputation(df_miss[col])
}
#save in new dataframe
df_mode = data.frame(
apply(df_miss, 2, FUN = ModeImputation)
)
View(df_mode)
View(df_miss)
View(data)
freq_table$not_na[pos]
as.numeric(freq_table$not_na[pos])
pos
freq_table$not_na[pos]
levels(freq_table$not_na)[pos]
ModeImputation = function(vec){
not_na = vec[!is.na(vec)]
freq_table = as.data.frame(table(not_na))
pos = which.max(freq_table$Freq)
vec[is.na(vec)] = as.numeric(levels(freq_table$not_na)[pos])
return(vec)
}
# DATASET
df_miss = airquality
#save inplace
for(col in colnames(df_miss)){
df_miss[col] = ModeImputation(df_miss[col])
}
#save in new dataframe
df_mode = data.frame(
apply(df_miss, 2, FUN = ModeImputation)
)
View(df_mode)
View(df_miss)
